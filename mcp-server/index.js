// Simple Tyaprover MCP Server
// Generated by Copilot

const { McpServer } = require("@modelcontextprotocol/sdk/server/mcp");
const { StdioServerTransport } = require("@modelcontextprotocol/sdk/server/stdio");
const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');

// Load configuration
function loadConfig() {
    let config = {};

    // Try to load config.json
    try {
        const configPath = path.join(__dirname, 'config.json');
        if (fs.existsSync(configPath)) {
            config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
        }
    } catch (error) {
        console.error('Warning: Could not load config.json:', error.message);
    }

    return config;
}

const config = loadConfig();

// Configuration from environment variables with config file fallback
const TYAPROVER_API_URL = process.env.TYAPROVER_API_URL || config.api?.baseUrl || 'http://localhost:7474';
const TYAPROVER_AUTH_TOKEN = process.env.TYAPROVER_AUTH_TOKEN;
const TYAPROVER_NAMESPACE = process.env.TYAPROVER_NAMESPACE || 'captain';
const API_TIMEOUT = parseInt(process.env.API_TIMEOUT) || config.api?.timeout || 30000;
const LOG_LEVEL = process.env.LOG_LEVEL || config.logging?.level || 'info';

class TyaproverMCPServer {
    constructor() {
        this.config = config;
        this.server = new McpServer(
            {
                name: config.server?.name || "tyaprover",
                version: config.server?.version || "0.1.0",
            },
            {
                capabilities: {
                    tools: {},
                },
            }
        );

        this.setupHandlers();
    }

    log(level, message, data = null) {
        if (this.shouldLog(level)) {
            const timestamp = new Date().toISOString();
            const logEntry = {
                timestamp,
                level,
                message,
                ...(data && { data })
            };

            if (config.logging?.format === 'json') {
                console.error(JSON.stringify(logEntry));
            } else {
                console.error(`[${timestamp}] ${level.toUpperCase()}: ${message}`, data || '');
            }
        }
    }

    shouldLog(level) {
        const levels = { error: 0, warn: 1, info: 2, debug: 3 };
        const currentLevel = levels[LOG_LEVEL] || 2;
        const messageLevel = levels[level] || 2;
        return messageLevel <= currentLevel;
    }

    setupHandlers() {
        // List all apps
        this.server.addTool(
            {
                name: "tyaprover/listApps",
                description: "List all deployed applications in Tyaprover",
                inputSchema: {
                    type: "object",
                    properties: {},
                },
            },
            async () => {
                try {
                    const response = await this.makeAPICall('/user/apps/appData');
                    return {
                        content: [
                            {
                                type: "text",
                                text: JSON.stringify(response.data, null, 2),
                            },
                        ],
                    };
                } catch (error) {
                    return {
                        content: [
                            {
                                type: "text",
                                text: `Error listing apps: ${error.message}`,
                            },
                        ],
                        isError: true,
                    };
                }
            }
        );

        // Get app details
        this.server.addTool(
            {
                name: "tyaprover/getAppDetails",
                description: "Get details for a specific application",
                inputSchema: {
                    type: "object",
                    properties: {
                        appName: {
                            type: "string",
                            description: "Name of the application",
                        },
                    },
                    required: ["appName"],
                },
            },
            async (params) => {
                try {
                    const { appName } = params;
                    const response = await this.makeAPICall(`/user/apps/appData/${appName}`);
                    return {
                        content: [
                            {
                                type: "text",
                                text: JSON.stringify(response.data, null, 2),
                            },
                        ],
                    };
                } catch (error) {
                    return {
                        content: [
                            {
                                type: "text",
                                text: `Error getting app details: ${error.message}`,
                            },
                        ],
                        isError: true,
                    };
                }
            }
        );

        // Deploy new app
        this.server.addTool(
            {
                name: "tyaprover/deployApp",
                description: "Deploy a new application",
                inputSchema: {
                    type: "object",
                    properties: {
                        appName: {
                            type: "string",
                            description: "Name of the application",
                        },
                        imageName: {
                            type: "string",
                            description: "Docker image name",
                        },
                    },
                    required: ["appName", "imageName"],
                },
            },
            async (params) => {
                try {
                    const { appName, imageName } = params;
                    const response = await this.makeAPICall('/user/apps/appData', {
                        method: 'POST',
                        body: JSON.stringify({
                            appName,
                            imageName,
                        }),
                    });
                    return {
                        content: [
                            {
                                type: "text",
                                text: `Successfully deployed ${appName} with image ${imageName}`,
                            },
                        ],
                    };
                } catch (error) {
                    return {
                        content: [
                            {
                                type: "text",
                                text: `Error deploying app: ${error.message}`,
                            },
                        ],
                        isError: true,
                    };
                }
            }
        );
    }

    async makeAPICall(endpoint, options = {}) {
        const url = `${TYAPROVER_API_URL}/api/${config.api?.version || 'v2'}${endpoint}`;
        const defaultOptions = {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                [config.security?.authHeader || 'x-captain-auth']: TYAPROVER_AUTH_TOKEN || '',
            },
            timeout: API_TIMEOUT,
        };

        this.log('debug', `Making API call to ${url}`, { method: options.method || 'GET' });

        try {
            const response = await fetch(url, { ...defaultOptions, ...options });

            if (!response.ok) {
                const errorMessage = `API call failed: ${response.status} ${response.statusText}`;
                this.log('error', errorMessage, { url, status: response.status });
                throw new Error(errorMessage);
            }

            const result = await response.json();
            this.log('debug', 'API call successful', { url, status: response.status });
            return result;
        } catch (error) {
            this.log('error', 'API call error', { url, error: error.message });
            throw error;
        }
    }

    async run() {
        // Validate configuration
        if (!TYAPROVER_AUTH_TOKEN) {
            this.log('warn', 'TYAPROVER_AUTH_TOKEN not set - API calls may fail');
        }

        this.log('info', 'Starting Tyaprover MCP Server', {
            apiUrl: TYAPROVER_API_URL,
            namespace: TYAPROVER_NAMESPACE,
            timeout: API_TIMEOUT,
            logLevel: LOG_LEVEL
        });

        const transport = new StdioServerTransport();
        await this.server.connect(transport);

        this.log('info', 'Tyaprover MCP server running on stdio');
        console.error("Tyaprover MCP server running on stdio");
    }
}

// Start the server
if (require.main === module) {
    const server = new TyaproverMCPServer();
    server.run().catch(console.error);
}

module.exports = { TyaproverMCPServer };

// Generated by Copilot
